syntax = "proto3";


package containermaker;


// Defines the level of network exposure for a container
enum ExposureLevel {
  EXPOSURE_LEVEL_UNSPECIFIED = 0;  // Default unspecified value (proto3 requirement)
  EXPOSURE_LEVEL_INTERNAL = 1;      // only pod
  EXPOSURE_LEVEL_CLUSTER_LOCAL = 2; // service with cluster ip
  EXPOSURE_LEVEL_CLUSTER_EXTERNAL = 3; // service with external ip
  EXPOSURE_LEVEL_EXPOSED = 4;       // ingress level
}


// The publish information of the container
message PublishInformation {
  int32 publish_port = 1;  // the port of the service
  int32 target_port = 2;  // the port of the pod
  string protocol = 3;  // the protocol of the service
  optional int32 node_port = 4;  // the node port of the service. The service type must be NodePort to use this.
}


// Represents configuration for creating a container
message CreateContainerRequest {
  string image_name = 1;  // name of the image to use
  string container_name = 2;  // name of the container
  string network_name = 3;  // name of the network
  ExposureLevel exposure_level = 4;  // exposure level of the container
  repeated PublishInformation publish_information = 5;  // list of publish information
  map<string, string> environment_variables = 6;  // environment variables
}


// Get Container Request
message GetContainerRequest {
    string container_id = 1;  // id of the container
    string network_name = 2;  // network of the container
}


// Delete Container Request
message DeleteContainerRequest {
    string container_id = 1;  // id of the container
    string network_name = 2;  // network of the container
}


// List Container Request
message ListContainerRequest {
    string network_name = 1;  // network of the containers
}


// Represents the port information for the container response
message PortInformation {
    optional string name = 1;  // name of the port
    int32 container_port = 2;  // the actual container port
    optional string protocol = 3;  // the protocol of the container port
}


// Represents container response
message ContainerResponse {
    string container_id = 1;  // the id of the container
    string container_name = 2;  // the name of the container
    string container_ip = 3;  // the ip of the container
    string container_network = 4;  // the network of the container
    repeated PortInformation ports = 5;  // the port information of the container
}


// list container response
message ListContainerResponse {
    repeated ContainerResponse containers = 1;  // the list of containers
}


// delete container response
message DeleteContainerResponse {
    string container_id = 1;  // the id of the container
    string status = 2;  // the status of the container
}
