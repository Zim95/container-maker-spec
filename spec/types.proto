syntax = "proto3";


package containermaker;


/**
 * Create container request. To create a container in the running environment.
 */
 message CreateContainerRequest {
    string image_name = 1; // Name of the image. Should include repository name as well. Should be public.
    string container_name = 2; // Name of the container that will be created.
    string container_network = 3; // Network in which the container will be created. Network will be created if it does not exist.
    map<string, string> publish_information = 4; // Port mappings between port inside the container and the external world.
    map<string, string> environment = 5; // Environment variables. Usually includes sensitive information such as username and password.
}


/**
 * Create container response item.
 * The actual response will be a list of these.
 */
message CreateContainerResponseItem {
    string container_id = 1; // The id of the container. We might have multiple of them.
    string container_image = 2; // The image of the container.
    string container_name = 3; // The name of the container.
    string container_network = 4; // The network of the container.
    uint32 container_port = 5; // The port of the container which is opened. TODO: This might be optional or there may be multiple.
}


/**
 * Create container response. Collection of create container response items.
 */
message CreateContainerResponse {
    repeated CreateContainerResponseItem create_container_response_item = 1; // CreateContainerResponseItem list.
}


/**
 * Manipulate a created container. Start, Stop, Delete operations.
 * NOTE: A single container name, network might be associated with multiple container ids.
 *       This ususally hapens when we spawn multiple services for the same container name (In case of kubernetes).
 */
message ManipulateContainerRequest {
    repeated string container_ids = 1; // List of container ids to be manipulated.
    string container_network = 2; // The network where the container ids are deployed.
    string container_name = 3; // The name of the associated container ids.
}


/**
 * Start Container Response Item.
 */
message StartContainerResponseItem {
    string container_id = 1; // Id of the container.
    string container_ip = 2; // Ip of the container.
    string container_name = 3; // Name of the container
}


/**
 * Collection of StartContainerResponseItem. The actual start container response. 
 */
message StartContainerResponse {
    repeated StartContainerResponseItem start_container_response_item = 1; // StartContainerResponseItem list.
}


/**
 * Stop Container Response Item.
 */
message StopContainerResponseItem {
    string container_id = 1; // Id of the container.
    string container_name = 2; // Name of the container.
    string container_network = 3; // Network of the container.
    string status = 4; // Stopped status.
}


/**
 * Collection of StopContainerResponseItem. The actual stop container response.
 */
message StopContainerResponse {
    repeated StopContainerResponseItem stop_container_response_item = 1; // StopContainerResponseItem list.
}


/**
 * Delete Container Response Item.
 */
message DeleteContainerResponseItem {
    string container_id = 1; // Id of the container.
    string container_name = 2; // Name of the container.
    string container_network = 3; // Network of the container.
    string status = 4; // Deleted status.
}


/**
 * Collection of DeleteContainerResponseItem. The actual delete container response.
 */
message DeleteContainerResponse {
    repeated DeleteContainerResponseItem delete_container_response_item = 1; // DeleteContainerResponseItem list.
}
